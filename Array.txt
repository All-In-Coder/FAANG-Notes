1. Find the duplicate in an array of N+1 Integer:
    First Method:
        Number ko index ki tarah mano and jo Number aaya he use index mante hue us index pr negative krdo
        agar us index pe pehle se hi number negative present he to yahi number apna answer he

        int n = nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[abs(nums[i])-1]<0)
                return abs(nums[i]);
            else
                nums[abs(nums[i])-1] = -nums[abs(nums[i])-1];
        }
        return n+1;

    Second Method:
        Using the Floyd Warshall Algo

        int n = nums.size();
        
        int fast = nums[0];
        int slow = nums[0];
        do
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(fast!=slow);
        
        fast = nums[0];
        while(fast!=slow)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        return fast;

2. Sort an array of 0's 1's 2's without using extra space
    First Method:
        Sorting
        int n = nums.size();
        sort(nums.begin(),nums.end());

    Second Method:
        Using Dutch National Flag theorem
            Initialize three pointers:
                Low=0, mid=0,high=n-1
            If we encounter 1 at mid position, swap mid and Low amd Increase mid and Low
            If we encounter 2 at mid position, swap mid and high and Decrease high
            else Increase mid

        int n = nums.size();
        int low = 0, mid=0;
        int high = n-1;
        
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums[mid],nums[low]);
                low++;
                mid++;
            }
            else if(nums[mid]==2)
            {
                swap(nums[mid],nums[high]);
                high--;
            }
            else
                mid++;
        }


3. Repeat and Missing Number
    First Method:
        Sort the array

    Second Method:
        Using hashing

    Third Method:
        First find sum of first N number
        then find the sum of array
        Now if we subtract the first from second, we will get a-b=S(a is missing and b is Repeating)

        Now find the sum of first N^2 number
        then find the sum of squares of array number
        Now if we subtract the first from second, we will get a+b=S(a is missing and b is Repeating)

        Now we can easily find the missing and Repeating Number
        a-b = S
        a+b = S^2

        Limitation: Integer Overflow

    Fourth Method:
        First XOR of array
        Now take the XOR of n numbers from the number we have produce in upper step
        this is our X^Y

        baki ka code se samagh lo

        int num = 0;
        for(int i=0;i<A.size();i++)
            num^=A[i];
        int n = A.size();
        for(int i=1;i<=n;i++)
            num^=i;
        int rsb = num &(-num);
        int x = 0, y=0;
        for(int i=0;i<n;i++)
        {
            if((A[i]&rsb)==0)
                x^=A[i];
            else
                y^=A[i];
            
        }
        
        for(int i=1;i<=n;i++)
        {
            if((i&rsb)==0)
                x^=i;
            else
                y^=i;
        }
        vector<int>ans;
        for(int i=0;i<n;i++)
        {
            if(A[i]==x)
            {
                ans.push_back(x);
                ans.push_back(y);
                break;
            }
            else if(A[i]==y)
            {
                ans.push_back(y);
                ans.push_back(x);
                break;
            }
        }
        return ans;

4. Merge Two sorted Arrays
    1. Using two pointers Method
    2. Merge two arrays and then sort
    3. Gap Method (To learn)

5. Kadane's Algorithm
    aati he

6. Merge Overlapping SubIntervals
    First Method:
        check one by one

    Second Method:
        sort the array with increasing start time and then merge 

        sort(intervals.begin(), intervals.end()); // It will sort the array according to start time 
        vector<vector<int>>ans;
        int n=intervals.size();
        
        if(n==0)
            return ans;
            
        vector<int>temp;
        temp.push_back(intervals[0][0]);
        temp.push_back(intervals[0][1]);
        ans.push_back(temp);
        for(int i=1;i<n;i++)
        {
            if(intervals[i][0]<=ans[ans.size()-1][1])
            {
                ans[ans.size()-1][1]=max(intervals[i][1],ans[ans.size()-1][1]);
            }
            else
            {
                vector<int>temp;
                temp.push_back(intervals[i][0]);
                temp.push_back(intervals[i][1]);
                ans.push_back(temp);
            }
        }
        return ans;

7. Set Matrix to zero
    1. Using Extra space

    2. Mark the 0th column and 0th row according to the value of the matrix in that cell

        int n = A.size();
        int m = A[0].size();
        
        int flag=0;                  // For checking if there is any cell in the 0th column having value 0
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                    if(j==0 and A[i][j]==0)
                        flag=1;
                        
                    else if(A[i][j] == 0)
                    {
                        A[i][0]=A[0][j]=0;
                    }
            }
        }
        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
                if(j==0)
                {
                    if(flag==1)
                        A[i][j]=0;
                }
                else if(A[i][0]==0 or A[0][j]==0)
                        A[i][j]=0;
            }
        }


8. Pascal Triangle
    1. Using the extra space(Values of upper cell)

    2. Using the formula
        Ï€(i=0 to n-1) = (n-i)/(i+1)

        int find(int n, int r)
        {
            
            int k = min(r,n-r);
            
            int ans = 1;
            for(int i=0;i<k;i++)
            {
                ans = ans*(n-i)/(i+1);
            }
            return ans;
        }

9. Next Permutation
    1. Using STL (next_permutation())

    2.Second Method: 
        1.First find the index from last where arr[i]<arr[i+1], mark it as index;

        2.Now from index+1 to n, find the minimum value which is larger than arr[index] and is as right as it can be, mark it as high.

        3. Swap arr[index] and arr[high]

        4. reverse the array from index+1 to n

            int n = arr.size();
            int index = -1;
            for(int i=n-2;i>=0;i--)
            {
                if(arr[i]<arr[i+1])
                {
                    index = i;
                    break;
                }
            }
            if(index==-1)
            {
                return arr;
            }
            else
            {
                int high = index+1;
                for(int i=index+1;i<n;i++)
                {
                    if(arr[i]>arr[index] and arr[i]<arr[high])
                        high = i;
                }
                swap(arr[index],arr[high]);
                reverse(arr.begin()+index+1,arr.end());
                
                return arr;

            }
            return arr;

10. Inversion in an array
    :) Using the Merge sort Method

11. Stock buy and sell

    1. For every point, find the lowest value in it's right(O(n^2))
    2. For every point maintain the lowest value till encounter and accordingly change the profit
        int profit = 0;
        int m = 1e9;
        
        for(int i=0;i<prices.size();i++)
        {
            profit = max(profit, prices[i]-m);
            m = min(m,prices[i]);
        }
        return profit;

12.Rotate matrix
    First Method
        1. Take the transpose of the matrix
        2. Reverse every row
        
            int n = matrix.size();
            int m = matrix[0].size();
            
            for(int i=0;i<n;i++)
            {
                for(int j=i;j<m;j++)
                    swap(matrix[i][j] ,matrix[j][i]);
            }
            
            for(int i=0;i<n;i++)
            {
                reverse(matrix[i].begin(),matrix[i].end());
            }

    
